# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/tables.ipynb.

# %% auto 0
__all__ = ['perf_stats']

# %% ../nbs/tables.ipynb 3
import quantstats as qs
import pandas as pd
import numpy as np

# %% ../nbs/tables.ipynb 4
class perf_stats:
    def __init__(self, x, benchmark=None, riskfree_rate=0, date_col='Date'):
        self.x = x
        self.benchmark = benchmark
        self.riskfree_rate = riskfree_rate
        self.date_col = date_col
    def datapoint_year(self) -> int:
        years = (self.x).reset_index()[self.date_col].dt.year
        n_in_year = years.value_counts().mode()
        return int(n_in_year.values[0])
    def __basic_stats(self) -> pd.DataFrame:
        per_year = self.datapoint_year()
        #print(f'Number of data points per year: {per_year}')
        stats = qs.reports.metrics(self.x, benchmark = self.benchmark, display=False, rf=self.riskfree_rate, periods_per_year=per_year)
        stats.loc['Num_periods_year'] = per_year
        vol_strategy = (np.std(self.x) * np.sqrt(per_year)).round(2)
        mean_strategy = (np.mean(self.x) * per_year).round(2)
        # Check if benchmark is not None and not empty
        if self.benchmark is not None and not self.benchmark.empty:
            vol_benchmark = (np.std(self.benchmark) * np.sqrt(per_year)).round(2)
            mean_benchmark = (np.mean(self.benchmark) * per_year).round(2)
            vol = pd.Series({'Strategy': vol_strategy, 'Benchmark': vol_benchmark})
            avg = pd.Series({'Strategy': mean_strategy, 'Benchmark': mean_benchmark})
        else:
            vol = pd.Series({'Strategy': vol_strategy})
            avg = pd.Series({'Strategy': mean_strategy})
        stats.loc['Vol (Day ann.)'] = vol
        stats.loc['Avg (Day ann.)'] = avg  
        return stats
    def return_performance(self) -> pd.DataFrame:
        stats = self.__basic_stats()
        perf = stats.loc[['Start Period','End Period','Avg (Day ann.)', 'Vol (Day ann.)', 'Sharpe', 'MTD','YTD','3M','6M','1Y','3Y (ann.)','5Y (ann.)'],:]
        # Risk
        risk = stats.loc[['Max Drawdown','Longest DD Days','Avg. Drawdown','Avg. Drawdown Days'], :]
        return perf, risk
    def dd_stats(self) -> pd.DataFrame:
        dd = qs.stats.to_drawdown_series(self.x)
        dd_table = qs.stats.drawdown_details(dd)
        top5 = dd_table.sort_values(by='max drawdown', ascending=True).head(5)
        return top5,dd_table,dd
    def roll_volatility(self, window=365) -> pd.DataFrame:
        p = self.x.rolling(window).std().ffill().bfill() * np.sqrt(self.datapoint_year())
        b = None  # Benchmark volatility
        if self.benchmark is not None and not self.benchmark.empty:
            b = self.benchmark.rolling(window).std().ffill().bfill() * np.sqrt(self.datapoint_year())
        return p,b
    def roll_sharpe(self, window=365) -> pd.DataFrame:
        vp,vb = self.roll_volatility(window)
        p = (self.x.rolling(window).mean().ffill().bfill() - self.riskfree_rate) / vp
        b = None  # Benchmark Sharpe ratio
        if self.benchmark is not None and not self.benchmark.empty:
            b = (self.benchmark.rolling(window).mean().ffill().bfill() - self.riskfree_rate) / vb
        return p,b
    def roll_beta(self, window=365) -> pd.DataFrame:
        return (self.x.rolling(window).cov(self.benchmark) / self.benchmark.rolling(window).var()).fillna(0)
    def roll_alpha(self, window=365) -> pd.DataFrame:
        return (self.x.rolling(window).mean().ffill().bfill() - self.riskfree_rate) - (self.benchmark.rolling(window).mean().ffill().bfill() - self.riskfree_rate) * self.roll_beta(window)
    def roll_average_return(self, window=365) -> pd.DataFrame:
        p = (self.x.rolling(window).mean().ffill().bfill()*self.datapoint_year()).fillna(0)
        b = None  # Benchmark average return
        if self.benchmark is not None and not self.benchmark.empty:
            b = (self.benchmark.rolling(window).mean().ffill().bfill()*self.datapoint_year()).fillna(0)
        return p,b
    def monthly_returns(self) -> pd.DataFrame:
        return qs.stats.monthly_returns(self.x)

